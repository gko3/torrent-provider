/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gko3.torrentprovider.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TorrentResponse implements org.apache.thrift.TBase<TorrentResponse, TorrentResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TorrentResponse");

  private static final org.apache.thrift.protocol.TField TORRENT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("torrentUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TORRENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("torrentStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TORRENT_ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("torrentZipCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTime", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TorrentResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TorrentResponseTupleSchemeFactory());
  }

  public String torrentUrl; // required
  /**
   * 
   * @see TorrentStatus
   */
  public TorrentStatus torrentStatus; // required
  public ByteBuffer torrentZipCode; // required
  public String message; // optional
  public long modifyTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TORRENT_URL((short)1, "torrentUrl"),
    /**
     * 
     * @see TorrentStatus
     */
    TORRENT_STATUS((short)2, "torrentStatus"),
    TORRENT_ZIP_CODE((short)3, "torrentZipCode"),
    MESSAGE((short)4, "message"),
    MODIFY_TIME((short)5, "modifyTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TORRENT_URL
          return TORRENT_URL;
        case 2: // TORRENT_STATUS
          return TORRENT_STATUS;
        case 3: // TORRENT_ZIP_CODE
          return TORRENT_ZIP_CODE;
        case 4: // MESSAGE
          return MESSAGE;
        case 5: // MODIFY_TIME
          return MODIFY_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODIFYTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MESSAGE,_Fields.MODIFY_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TORRENT_URL, new org.apache.thrift.meta_data.FieldMetaData("torrentUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TORRENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("torrentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TorrentStatus.class)));
    tmpMap.put(_Fields.TORRENT_ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("torrentZipCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifyTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TorrentResponse.class, metaDataMap);
  }

  public TorrentResponse() {
    this.torrentStatus = com.gko3.torrentprovider.thrift.TorrentStatus.STATUS_UNKNOWN;

  }

  public TorrentResponse(
    String torrentUrl,
    TorrentStatus torrentStatus,
    ByteBuffer torrentZipCode)
  {
    this();
    this.torrentUrl = torrentUrl;
    this.torrentStatus = torrentStatus;
    this.torrentZipCode = torrentZipCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TorrentResponse(TorrentResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTorrentUrl()) {
      this.torrentUrl = other.torrentUrl;
    }
    if (other.isSetTorrentStatus()) {
      this.torrentStatus = other.torrentStatus;
    }
    if (other.isSetTorrentZipCode()) {
      this.torrentZipCode = org.apache.thrift.TBaseHelper.copyBinary(other.torrentZipCode);
;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.modifyTime = other.modifyTime;
  }

  public TorrentResponse deepCopy() {
    return new TorrentResponse(this);
  }

  @Override
  public void clear() {
    this.torrentUrl = null;
    this.torrentStatus = com.gko3.torrentprovider.thrift.TorrentStatus.STATUS_UNKNOWN;

    this.torrentZipCode = null;
    this.message = null;
    setModifyTimeIsSet(false);
    this.modifyTime = 0;
  }

  public String getTorrentUrl() {
    return this.torrentUrl;
  }

  public TorrentResponse setTorrentUrl(String torrentUrl) {
    this.torrentUrl = torrentUrl;
    return this;
  }

  public void unsetTorrentUrl() {
    this.torrentUrl = null;
  }

  /** Returns true if field torrentUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetTorrentUrl() {
    return this.torrentUrl != null;
  }

  public void setTorrentUrlIsSet(boolean value) {
    if (!value) {
      this.torrentUrl = null;
    }
  }

  /**
   * 
   * @see TorrentStatus
   */
  public TorrentStatus getTorrentStatus() {
    return this.torrentStatus;
  }

  /**
   * 
   * @see TorrentStatus
   */
  public TorrentResponse setTorrentStatus(TorrentStatus torrentStatus) {
    this.torrentStatus = torrentStatus;
    return this;
  }

  public void unsetTorrentStatus() {
    this.torrentStatus = null;
  }

  /** Returns true if field torrentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTorrentStatus() {
    return this.torrentStatus != null;
  }

  public void setTorrentStatusIsSet(boolean value) {
    if (!value) {
      this.torrentStatus = null;
    }
  }

  public byte[] getTorrentZipCode() {
    setTorrentZipCode(org.apache.thrift.TBaseHelper.rightSize(torrentZipCode));
    return torrentZipCode == null ? null : torrentZipCode.array();
  }

  public ByteBuffer bufferForTorrentZipCode() {
    return torrentZipCode;
  }

  public TorrentResponse setTorrentZipCode(byte[] torrentZipCode) {
    setTorrentZipCode(torrentZipCode == null ? (ByteBuffer)null : ByteBuffer.wrap(torrentZipCode));
    return this;
  }

  public TorrentResponse setTorrentZipCode(ByteBuffer torrentZipCode) {
    this.torrentZipCode = torrentZipCode;
    return this;
  }

  public void unsetTorrentZipCode() {
    this.torrentZipCode = null;
  }

  /** Returns true if field torrentZipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTorrentZipCode() {
    return this.torrentZipCode != null;
  }

  public void setTorrentZipCodeIsSet(boolean value) {
    if (!value) {
      this.torrentZipCode = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public TorrentResponse setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public long getModifyTime() {
    return this.modifyTime;
  }

  public TorrentResponse setModifyTime(long modifyTime) {
    this.modifyTime = modifyTime;
    setModifyTimeIsSet(true);
    return this;
  }

  public void unsetModifyTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFYTIME_ISSET_ID);
  }

  /** Returns true if field modifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFYTIME_ISSET_ID);
  }

  public void setModifyTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFYTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TORRENT_URL:
      if (value == null) {
        unsetTorrentUrl();
      } else {
        setTorrentUrl((String)value);
      }
      break;

    case TORRENT_STATUS:
      if (value == null) {
        unsetTorrentStatus();
      } else {
        setTorrentStatus((TorrentStatus)value);
      }
      break;

    case TORRENT_ZIP_CODE:
      if (value == null) {
        unsetTorrentZipCode();
      } else {
        setTorrentZipCode((ByteBuffer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModifyTime();
      } else {
        setModifyTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TORRENT_URL:
      return getTorrentUrl();

    case TORRENT_STATUS:
      return getTorrentStatus();

    case TORRENT_ZIP_CODE:
      return getTorrentZipCode();

    case MESSAGE:
      return getMessage();

    case MODIFY_TIME:
      return Long.valueOf(getModifyTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TORRENT_URL:
      return isSetTorrentUrl();
    case TORRENT_STATUS:
      return isSetTorrentStatus();
    case TORRENT_ZIP_CODE:
      return isSetTorrentZipCode();
    case MESSAGE:
      return isSetMessage();
    case MODIFY_TIME:
      return isSetModifyTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TorrentResponse)
      return this.equals((TorrentResponse)that);
    return false;
  }

  public boolean equals(TorrentResponse that) {
    if (that == null)
      return false;

    boolean this_present_torrentUrl = true && this.isSetTorrentUrl();
    boolean that_present_torrentUrl = true && that.isSetTorrentUrl();
    if (this_present_torrentUrl || that_present_torrentUrl) {
      if (!(this_present_torrentUrl && that_present_torrentUrl))
        return false;
      if (!this.torrentUrl.equals(that.torrentUrl))
        return false;
    }

    boolean this_present_torrentStatus = true && this.isSetTorrentStatus();
    boolean that_present_torrentStatus = true && that.isSetTorrentStatus();
    if (this_present_torrentStatus || that_present_torrentStatus) {
      if (!(this_present_torrentStatus && that_present_torrentStatus))
        return false;
      if (!this.torrentStatus.equals(that.torrentStatus))
        return false;
    }

    boolean this_present_torrentZipCode = true && this.isSetTorrentZipCode();
    boolean that_present_torrentZipCode = true && that.isSetTorrentZipCode();
    if (this_present_torrentZipCode || that_present_torrentZipCode) {
      if (!(this_present_torrentZipCode && that_present_torrentZipCode))
        return false;
      if (!this.torrentZipCode.equals(that.torrentZipCode))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_modifyTime = true && this.isSetModifyTime();
    boolean that_present_modifyTime = true && that.isSetModifyTime();
    if (this_present_modifyTime || that_present_modifyTime) {
      if (!(this_present_modifyTime && that_present_modifyTime))
        return false;
      if (this.modifyTime != that.modifyTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TorrentResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TorrentResponse typedOther = (TorrentResponse)other;

    lastComparison = Boolean.valueOf(isSetTorrentUrl()).compareTo(typedOther.isSetTorrentUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTorrentUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.torrentUrl, typedOther.torrentUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTorrentStatus()).compareTo(typedOther.isSetTorrentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTorrentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.torrentStatus, typedOther.torrentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTorrentZipCode()).compareTo(typedOther.isSetTorrentZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTorrentZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.torrentZipCode, typedOther.torrentZipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyTime()).compareTo(typedOther.isSetModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, typedOther.modifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TorrentResponse(");
    boolean first = true;

    sb.append("torrentUrl:");
    if (this.torrentUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.torrentUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("torrentStatus:");
    if (this.torrentStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.torrentStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("torrentZipCode:");
    if (this.torrentZipCode == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.torrentZipCode, sb);
    }
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetModifyTime()) {
      if (!first) sb.append(", ");
      sb.append("modifyTime:");
      sb.append(this.modifyTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TorrentResponseStandardSchemeFactory implements SchemeFactory {
    public TorrentResponseStandardScheme getScheme() {
      return new TorrentResponseStandardScheme();
    }
  }

  private static class TorrentResponseStandardScheme extends StandardScheme<TorrentResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TorrentResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TORRENT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.torrentUrl = iprot.readString();
              struct.setTorrentUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TORRENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.torrentStatus = TorrentStatus.findByValue(iprot.readI32());
              struct.setTorrentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TORRENT_ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.torrentZipCode = iprot.readBinary();
              struct.setTorrentZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifyTime = iprot.readI64();
              struct.setModifyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TorrentResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.torrentUrl != null) {
        oprot.writeFieldBegin(TORRENT_URL_FIELD_DESC);
        oprot.writeString(struct.torrentUrl);
        oprot.writeFieldEnd();
      }
      if (struct.torrentStatus != null) {
        oprot.writeFieldBegin(TORRENT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.torrentStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.torrentZipCode != null) {
        oprot.writeFieldBegin(TORRENT_ZIP_CODE_FIELD_DESC);
        oprot.writeBinary(struct.torrentZipCode);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetModifyTime()) {
        oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
        oprot.writeI64(struct.modifyTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TorrentResponseTupleSchemeFactory implements SchemeFactory {
    public TorrentResponseTupleScheme getScheme() {
      return new TorrentResponseTupleScheme();
    }
  }

  private static class TorrentResponseTupleScheme extends TupleScheme<TorrentResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TorrentResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTorrentUrl()) {
        optionals.set(0);
      }
      if (struct.isSetTorrentStatus()) {
        optionals.set(1);
      }
      if (struct.isSetTorrentZipCode()) {
        optionals.set(2);
      }
      if (struct.isSetMessage()) {
        optionals.set(3);
      }
      if (struct.isSetModifyTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTorrentUrl()) {
        oprot.writeString(struct.torrentUrl);
      }
      if (struct.isSetTorrentStatus()) {
        oprot.writeI32(struct.torrentStatus.getValue());
      }
      if (struct.isSetTorrentZipCode()) {
        oprot.writeBinary(struct.torrentZipCode);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetModifyTime()) {
        oprot.writeI64(struct.modifyTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TorrentResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.torrentUrl = iprot.readString();
        struct.setTorrentUrlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.torrentStatus = TorrentStatus.findByValue(iprot.readI32());
        struct.setTorrentStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.torrentZipCode = iprot.readBinary();
        struct.setTorrentZipCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.modifyTime = iprot.readI64();
        struct.setModifyTimeIsSet(true);
      }
    }
  }

}

