/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gko3.torrentprovider.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TorrentProviderService {

  public interface Iface {

    public TorrentResponse getTorrentZipCode(String torrentUrl) throws org.apache.thrift.TException;

    public GeneralResponse controlServer(ProviderServerCmd cmd) throws org.apache.thrift.TException;

    public GeneralResponse uploadTorrent(InfohashTorrent torrent) throws org.apache.thrift.TException;

    public InfohashTorrent getInfohashTorrent(String infohash) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTorrentZipCode(String torrentUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTorrentZipCode_call> resultHandler) throws org.apache.thrift.TException;

    public void controlServer(ProviderServerCmd cmd, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.controlServer_call> resultHandler) throws org.apache.thrift.TException;

    public void uploadTorrent(InfohashTorrent torrent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadTorrent_call> resultHandler) throws org.apache.thrift.TException;

    public void getInfohashTorrent(String infohash, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInfohashTorrent_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TorrentResponse getTorrentZipCode(String torrentUrl) throws org.apache.thrift.TException
    {
      send_getTorrentZipCode(torrentUrl);
      return recv_getTorrentZipCode();
    }

    public void send_getTorrentZipCode(String torrentUrl) throws org.apache.thrift.TException
    {
      getTorrentZipCode_args args = new getTorrentZipCode_args();
      args.setTorrentUrl(torrentUrl);
      sendBase("getTorrentZipCode", args);
    }

    public TorrentResponse recv_getTorrentZipCode() throws org.apache.thrift.TException
    {
      getTorrentZipCode_result result = new getTorrentZipCode_result();
      receiveBase(result, "getTorrentZipCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTorrentZipCode failed: unknown result");
    }

    public GeneralResponse controlServer(ProviderServerCmd cmd) throws org.apache.thrift.TException
    {
      send_controlServer(cmd);
      return recv_controlServer();
    }

    public void send_controlServer(ProviderServerCmd cmd) throws org.apache.thrift.TException
    {
      controlServer_args args = new controlServer_args();
      args.setCmd(cmd);
      sendBase("controlServer", args);
    }

    public GeneralResponse recv_controlServer() throws org.apache.thrift.TException
    {
      controlServer_result result = new controlServer_result();
      receiveBase(result, "controlServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "controlServer failed: unknown result");
    }

    public GeneralResponse uploadTorrent(InfohashTorrent torrent) throws org.apache.thrift.TException
    {
      send_uploadTorrent(torrent);
      return recv_uploadTorrent();
    }

    public void send_uploadTorrent(InfohashTorrent torrent) throws org.apache.thrift.TException
    {
      uploadTorrent_args args = new uploadTorrent_args();
      args.setTorrent(torrent);
      sendBase("uploadTorrent", args);
    }

    public GeneralResponse recv_uploadTorrent() throws org.apache.thrift.TException
    {
      uploadTorrent_result result = new uploadTorrent_result();
      receiveBase(result, "uploadTorrent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadTorrent failed: unknown result");
    }

    public InfohashTorrent getInfohashTorrent(String infohash) throws org.apache.thrift.TException
    {
      send_getInfohashTorrent(infohash);
      return recv_getInfohashTorrent();
    }

    public void send_getInfohashTorrent(String infohash) throws org.apache.thrift.TException
    {
      getInfohashTorrent_args args = new getInfohashTorrent_args();
      args.setInfohash(infohash);
      sendBase("getInfohashTorrent", args);
    }

    public InfohashTorrent recv_getInfohashTorrent() throws org.apache.thrift.TException
    {
      getInfohashTorrent_result result = new getInfohashTorrent_result();
      receiveBase(result, "getInfohashTorrent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfohashTorrent failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTorrentZipCode(String torrentUrl, org.apache.thrift.async.AsyncMethodCallback<getTorrentZipCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTorrentZipCode_call method_call = new getTorrentZipCode_call(torrentUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTorrentZipCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String torrentUrl;
      public getTorrentZipCode_call(String torrentUrl, org.apache.thrift.async.AsyncMethodCallback<getTorrentZipCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.torrentUrl = torrentUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTorrentZipCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTorrentZipCode_args args = new getTorrentZipCode_args();
        args.setTorrentUrl(torrentUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TorrentResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTorrentZipCode();
      }
    }

    public void controlServer(ProviderServerCmd cmd, org.apache.thrift.async.AsyncMethodCallback<controlServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      controlServer_call method_call = new controlServer_call(cmd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class controlServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProviderServerCmd cmd;
      public controlServer_call(ProviderServerCmd cmd, org.apache.thrift.async.AsyncMethodCallback<controlServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cmd = cmd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("controlServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        controlServer_args args = new controlServer_args();
        args.setCmd(cmd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GeneralResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_controlServer();
      }
    }

    public void uploadTorrent(InfohashTorrent torrent, org.apache.thrift.async.AsyncMethodCallback<uploadTorrent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadTorrent_call method_call = new uploadTorrent_call(torrent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadTorrent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private InfohashTorrent torrent;
      public uploadTorrent_call(InfohashTorrent torrent, org.apache.thrift.async.AsyncMethodCallback<uploadTorrent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.torrent = torrent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadTorrent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadTorrent_args args = new uploadTorrent_args();
        args.setTorrent(torrent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GeneralResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadTorrent();
      }
    }

    public void getInfohashTorrent(String infohash, org.apache.thrift.async.AsyncMethodCallback<getInfohashTorrent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInfohashTorrent_call method_call = new getInfohashTorrent_call(infohash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInfohashTorrent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String infohash;
      public getInfohashTorrent_call(String infohash, org.apache.thrift.async.AsyncMethodCallback<getInfohashTorrent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.infohash = infohash;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfohashTorrent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInfohashTorrent_args args = new getInfohashTorrent_args();
        args.setInfohash(infohash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InfohashTorrent getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInfohashTorrent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTorrentZipCode", new getTorrentZipCode());
      processMap.put("controlServer", new controlServer());
      processMap.put("uploadTorrent", new uploadTorrent());
      processMap.put("getInfohashTorrent", new getInfohashTorrent());
      return processMap;
    }

    public static class getTorrentZipCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTorrentZipCode_args> {
      public getTorrentZipCode() {
        super("getTorrentZipCode");
      }

      public getTorrentZipCode_args getEmptyArgsInstance() {
        return new getTorrentZipCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTorrentZipCode_result getResult(I iface, getTorrentZipCode_args args) throws org.apache.thrift.TException {
        getTorrentZipCode_result result = new getTorrentZipCode_result();
        result.success = iface.getTorrentZipCode(args.torrentUrl);
        return result;
      }
    }

    public static class controlServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, controlServer_args> {
      public controlServer() {
        super("controlServer");
      }

      public controlServer_args getEmptyArgsInstance() {
        return new controlServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public controlServer_result getResult(I iface, controlServer_args args) throws org.apache.thrift.TException {
        controlServer_result result = new controlServer_result();
        result.success = iface.controlServer(args.cmd);
        return result;
      }
    }

    public static class uploadTorrent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadTorrent_args> {
      public uploadTorrent() {
        super("uploadTorrent");
      }

      public uploadTorrent_args getEmptyArgsInstance() {
        return new uploadTorrent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadTorrent_result getResult(I iface, uploadTorrent_args args) throws org.apache.thrift.TException {
        uploadTorrent_result result = new uploadTorrent_result();
        result.success = iface.uploadTorrent(args.torrent);
        return result;
      }
    }

    public static class getInfohashTorrent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfohashTorrent_args> {
      public getInfohashTorrent() {
        super("getInfohashTorrent");
      }

      public getInfohashTorrent_args getEmptyArgsInstance() {
        return new getInfohashTorrent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInfohashTorrent_result getResult(I iface, getInfohashTorrent_args args) throws org.apache.thrift.TException {
        getInfohashTorrent_result result = new getInfohashTorrent_result();
        result.success = iface.getInfohashTorrent(args.infohash);
        return result;
      }
    }

  }

  public static class getTorrentZipCode_args implements org.apache.thrift.TBase<getTorrentZipCode_args, getTorrentZipCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTorrentZipCode_args");

    private static final org.apache.thrift.protocol.TField TORRENT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("torrentUrl", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTorrentZipCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTorrentZipCode_argsTupleSchemeFactory());
    }

    public String torrentUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TORRENT_URL((short)1, "torrentUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TORRENT_URL
            return TORRENT_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TORRENT_URL, new org.apache.thrift.meta_data.FieldMetaData("torrentUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTorrentZipCode_args.class, metaDataMap);
    }

    public getTorrentZipCode_args() {
    }

    public getTorrentZipCode_args(
      String torrentUrl)
    {
      this();
      this.torrentUrl = torrentUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTorrentZipCode_args(getTorrentZipCode_args other) {
      if (other.isSetTorrentUrl()) {
        this.torrentUrl = other.torrentUrl;
      }
    }

    public getTorrentZipCode_args deepCopy() {
      return new getTorrentZipCode_args(this);
    }

    @Override
    public void clear() {
      this.torrentUrl = null;
    }

    public String getTorrentUrl() {
      return this.torrentUrl;
    }

    public getTorrentZipCode_args setTorrentUrl(String torrentUrl) {
      this.torrentUrl = torrentUrl;
      return this;
    }

    public void unsetTorrentUrl() {
      this.torrentUrl = null;
    }

    /** Returns true if field torrentUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetTorrentUrl() {
      return this.torrentUrl != null;
    }

    public void setTorrentUrlIsSet(boolean value) {
      if (!value) {
        this.torrentUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TORRENT_URL:
        if (value == null) {
          unsetTorrentUrl();
        } else {
          setTorrentUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TORRENT_URL:
        return getTorrentUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TORRENT_URL:
        return isSetTorrentUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTorrentZipCode_args)
        return this.equals((getTorrentZipCode_args)that);
      return false;
    }

    public boolean equals(getTorrentZipCode_args that) {
      if (that == null)
        return false;

      boolean this_present_torrentUrl = true && this.isSetTorrentUrl();
      boolean that_present_torrentUrl = true && that.isSetTorrentUrl();
      if (this_present_torrentUrl || that_present_torrentUrl) {
        if (!(this_present_torrentUrl && that_present_torrentUrl))
          return false;
        if (!this.torrentUrl.equals(that.torrentUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTorrentZipCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTorrentZipCode_args typedOther = (getTorrentZipCode_args)other;

      lastComparison = Boolean.valueOf(isSetTorrentUrl()).compareTo(typedOther.isSetTorrentUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTorrentUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.torrentUrl, typedOther.torrentUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTorrentZipCode_args(");
      boolean first = true;

      sb.append("torrentUrl:");
      if (this.torrentUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.torrentUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTorrentZipCode_argsStandardSchemeFactory implements SchemeFactory {
      public getTorrentZipCode_argsStandardScheme getScheme() {
        return new getTorrentZipCode_argsStandardScheme();
      }
    }

    private static class getTorrentZipCode_argsStandardScheme extends StandardScheme<getTorrentZipCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTorrentZipCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TORRENT_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.torrentUrl = iprot.readString();
                struct.setTorrentUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTorrentZipCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.torrentUrl != null) {
          oprot.writeFieldBegin(TORRENT_URL_FIELD_DESC);
          oprot.writeString(struct.torrentUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTorrentZipCode_argsTupleSchemeFactory implements SchemeFactory {
      public getTorrentZipCode_argsTupleScheme getScheme() {
        return new getTorrentZipCode_argsTupleScheme();
      }
    }

    private static class getTorrentZipCode_argsTupleScheme extends TupleScheme<getTorrentZipCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTorrentZipCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTorrentUrl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTorrentUrl()) {
          oprot.writeString(struct.torrentUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTorrentZipCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.torrentUrl = iprot.readString();
          struct.setTorrentUrlIsSet(true);
        }
      }
    }

  }

  public static class getTorrentZipCode_result implements org.apache.thrift.TBase<getTorrentZipCode_result, getTorrentZipCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTorrentZipCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTorrentZipCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTorrentZipCode_resultTupleSchemeFactory());
    }

    public TorrentResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TorrentResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTorrentZipCode_result.class, metaDataMap);
    }

    public getTorrentZipCode_result() {
    }

    public getTorrentZipCode_result(
      TorrentResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTorrentZipCode_result(getTorrentZipCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new TorrentResponse(other.success);
      }
    }

    public getTorrentZipCode_result deepCopy() {
      return new getTorrentZipCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TorrentResponse getSuccess() {
      return this.success;
    }

    public getTorrentZipCode_result setSuccess(TorrentResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TorrentResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTorrentZipCode_result)
        return this.equals((getTorrentZipCode_result)that);
      return false;
    }

    public boolean equals(getTorrentZipCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTorrentZipCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTorrentZipCode_result typedOther = (getTorrentZipCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTorrentZipCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTorrentZipCode_resultStandardSchemeFactory implements SchemeFactory {
      public getTorrentZipCode_resultStandardScheme getScheme() {
        return new getTorrentZipCode_resultStandardScheme();
      }
    }

    private static class getTorrentZipCode_resultStandardScheme extends StandardScheme<getTorrentZipCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTorrentZipCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TorrentResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTorrentZipCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTorrentZipCode_resultTupleSchemeFactory implements SchemeFactory {
      public getTorrentZipCode_resultTupleScheme getScheme() {
        return new getTorrentZipCode_resultTupleScheme();
      }
    }

    private static class getTorrentZipCode_resultTupleScheme extends TupleScheme<getTorrentZipCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTorrentZipCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTorrentZipCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TorrentResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class controlServer_args implements org.apache.thrift.TBase<controlServer_args, controlServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("controlServer_args");

    private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controlServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controlServer_argsTupleSchemeFactory());
    }

    public ProviderServerCmd cmd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CMD((short)1, "cmd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CMD
            return CMD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProviderServerCmd.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(controlServer_args.class, metaDataMap);
    }

    public controlServer_args() {
    }

    public controlServer_args(
      ProviderServerCmd cmd)
    {
      this();
      this.cmd = cmd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controlServer_args(controlServer_args other) {
      if (other.isSetCmd()) {
        this.cmd = new ProviderServerCmd(other.cmd);
      }
    }

    public controlServer_args deepCopy() {
      return new controlServer_args(this);
    }

    @Override
    public void clear() {
      this.cmd = null;
    }

    public ProviderServerCmd getCmd() {
      return this.cmd;
    }

    public controlServer_args setCmd(ProviderServerCmd cmd) {
      this.cmd = cmd;
      return this;
    }

    public void unsetCmd() {
      this.cmd = null;
    }

    /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
    public boolean isSetCmd() {
      return this.cmd != null;
    }

    public void setCmdIsSet(boolean value) {
      if (!value) {
        this.cmd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CMD:
        if (value == null) {
          unsetCmd();
        } else {
          setCmd((ProviderServerCmd)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CMD:
        return getCmd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CMD:
        return isSetCmd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controlServer_args)
        return this.equals((controlServer_args)that);
      return false;
    }

    public boolean equals(controlServer_args that) {
      if (that == null)
        return false;

      boolean this_present_cmd = true && this.isSetCmd();
      boolean that_present_cmd = true && that.isSetCmd();
      if (this_present_cmd || that_present_cmd) {
        if (!(this_present_cmd && that_present_cmd))
          return false;
        if (!this.cmd.equals(that.cmd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(controlServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      controlServer_args typedOther = (controlServer_args)other;

      lastComparison = Boolean.valueOf(isSetCmd()).compareTo(typedOther.isSetCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, typedOther.cmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controlServer_args(");
      boolean first = true;

      sb.append("cmd:");
      if (this.cmd == null) {
        sb.append("null");
      } else {
        sb.append(this.cmd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cmd != null) {
        cmd.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controlServer_argsStandardSchemeFactory implements SchemeFactory {
      public controlServer_argsStandardScheme getScheme() {
        return new controlServer_argsStandardScheme();
      }
    }

    private static class controlServer_argsStandardScheme extends StandardScheme<controlServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, controlServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cmd = new ProviderServerCmd();
                struct.cmd.read(iprot);
                struct.setCmdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, controlServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cmd != null) {
          oprot.writeFieldBegin(CMD_FIELD_DESC);
          struct.cmd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controlServer_argsTupleSchemeFactory implements SchemeFactory {
      public controlServer_argsTupleScheme getScheme() {
        return new controlServer_argsTupleScheme();
      }
    }

    private static class controlServer_argsTupleScheme extends TupleScheme<controlServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, controlServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCmd()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCmd()) {
          struct.cmd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, controlServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cmd = new ProviderServerCmd();
          struct.cmd.read(iprot);
          struct.setCmdIsSet(true);
        }
      }
    }

  }

  public static class controlServer_result implements org.apache.thrift.TBase<controlServer_result, controlServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("controlServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controlServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controlServer_resultTupleSchemeFactory());
    }

    public GeneralResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeneralResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(controlServer_result.class, metaDataMap);
    }

    public controlServer_result() {
    }

    public controlServer_result(
      GeneralResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controlServer_result(controlServer_result other) {
      if (other.isSetSuccess()) {
        this.success = new GeneralResponse(other.success);
      }
    }

    public controlServer_result deepCopy() {
      return new controlServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GeneralResponse getSuccess() {
      return this.success;
    }

    public controlServer_result setSuccess(GeneralResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GeneralResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controlServer_result)
        return this.equals((controlServer_result)that);
      return false;
    }

    public boolean equals(controlServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(controlServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      controlServer_result typedOther = (controlServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controlServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controlServer_resultStandardSchemeFactory implements SchemeFactory {
      public controlServer_resultStandardScheme getScheme() {
        return new controlServer_resultStandardScheme();
      }
    }

    private static class controlServer_resultStandardScheme extends StandardScheme<controlServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, controlServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GeneralResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, controlServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controlServer_resultTupleSchemeFactory implements SchemeFactory {
      public controlServer_resultTupleScheme getScheme() {
        return new controlServer_resultTupleScheme();
      }
    }

    private static class controlServer_resultTupleScheme extends TupleScheme<controlServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, controlServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, controlServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GeneralResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class uploadTorrent_args implements org.apache.thrift.TBase<uploadTorrent_args, uploadTorrent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadTorrent_args");

    private static final org.apache.thrift.protocol.TField TORRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("torrent", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadTorrent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadTorrent_argsTupleSchemeFactory());
    }

    public InfohashTorrent torrent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TORRENT((short)1, "torrent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TORRENT
            return TORRENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TORRENT, new org.apache.thrift.meta_data.FieldMetaData("torrent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InfohashTorrent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadTorrent_args.class, metaDataMap);
    }

    public uploadTorrent_args() {
    }

    public uploadTorrent_args(
      InfohashTorrent torrent)
    {
      this();
      this.torrent = torrent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadTorrent_args(uploadTorrent_args other) {
      if (other.isSetTorrent()) {
        this.torrent = new InfohashTorrent(other.torrent);
      }
    }

    public uploadTorrent_args deepCopy() {
      return new uploadTorrent_args(this);
    }

    @Override
    public void clear() {
      this.torrent = null;
    }

    public InfohashTorrent getTorrent() {
      return this.torrent;
    }

    public uploadTorrent_args setTorrent(InfohashTorrent torrent) {
      this.torrent = torrent;
      return this;
    }

    public void unsetTorrent() {
      this.torrent = null;
    }

    /** Returns true if field torrent is set (has been assigned a value) and false otherwise */
    public boolean isSetTorrent() {
      return this.torrent != null;
    }

    public void setTorrentIsSet(boolean value) {
      if (!value) {
        this.torrent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TORRENT:
        if (value == null) {
          unsetTorrent();
        } else {
          setTorrent((InfohashTorrent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TORRENT:
        return getTorrent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TORRENT:
        return isSetTorrent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadTorrent_args)
        return this.equals((uploadTorrent_args)that);
      return false;
    }

    public boolean equals(uploadTorrent_args that) {
      if (that == null)
        return false;

      boolean this_present_torrent = true && this.isSetTorrent();
      boolean that_present_torrent = true && that.isSetTorrent();
      if (this_present_torrent || that_present_torrent) {
        if (!(this_present_torrent && that_present_torrent))
          return false;
        if (!this.torrent.equals(that.torrent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadTorrent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadTorrent_args typedOther = (uploadTorrent_args)other;

      lastComparison = Boolean.valueOf(isSetTorrent()).compareTo(typedOther.isSetTorrent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTorrent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.torrent, typedOther.torrent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadTorrent_args(");
      boolean first = true;

      sb.append("torrent:");
      if (this.torrent == null) {
        sb.append("null");
      } else {
        sb.append(this.torrent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (torrent != null) {
        torrent.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadTorrent_argsStandardSchemeFactory implements SchemeFactory {
      public uploadTorrent_argsStandardScheme getScheme() {
        return new uploadTorrent_argsStandardScheme();
      }
    }

    private static class uploadTorrent_argsStandardScheme extends StandardScheme<uploadTorrent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadTorrent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TORRENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.torrent = new InfohashTorrent();
                struct.torrent.read(iprot);
                struct.setTorrentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadTorrent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.torrent != null) {
          oprot.writeFieldBegin(TORRENT_FIELD_DESC);
          struct.torrent.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadTorrent_argsTupleSchemeFactory implements SchemeFactory {
      public uploadTorrent_argsTupleScheme getScheme() {
        return new uploadTorrent_argsTupleScheme();
      }
    }

    private static class uploadTorrent_argsTupleScheme extends TupleScheme<uploadTorrent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadTorrent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTorrent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTorrent()) {
          struct.torrent.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadTorrent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.torrent = new InfohashTorrent();
          struct.torrent.read(iprot);
          struct.setTorrentIsSet(true);
        }
      }
    }

  }

  public static class uploadTorrent_result implements org.apache.thrift.TBase<uploadTorrent_result, uploadTorrent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadTorrent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadTorrent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadTorrent_resultTupleSchemeFactory());
    }

    public GeneralResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeneralResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadTorrent_result.class, metaDataMap);
    }

    public uploadTorrent_result() {
    }

    public uploadTorrent_result(
      GeneralResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadTorrent_result(uploadTorrent_result other) {
      if (other.isSetSuccess()) {
        this.success = new GeneralResponse(other.success);
      }
    }

    public uploadTorrent_result deepCopy() {
      return new uploadTorrent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GeneralResponse getSuccess() {
      return this.success;
    }

    public uploadTorrent_result setSuccess(GeneralResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GeneralResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadTorrent_result)
        return this.equals((uploadTorrent_result)that);
      return false;
    }

    public boolean equals(uploadTorrent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadTorrent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadTorrent_result typedOther = (uploadTorrent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadTorrent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadTorrent_resultStandardSchemeFactory implements SchemeFactory {
      public uploadTorrent_resultStandardScheme getScheme() {
        return new uploadTorrent_resultStandardScheme();
      }
    }

    private static class uploadTorrent_resultStandardScheme extends StandardScheme<uploadTorrent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadTorrent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GeneralResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadTorrent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadTorrent_resultTupleSchemeFactory implements SchemeFactory {
      public uploadTorrent_resultTupleScheme getScheme() {
        return new uploadTorrent_resultTupleScheme();
      }
    }

    private static class uploadTorrent_resultTupleScheme extends TupleScheme<uploadTorrent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadTorrent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadTorrent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GeneralResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInfohashTorrent_args implements org.apache.thrift.TBase<getInfohashTorrent_args, getInfohashTorrent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfohashTorrent_args");

    private static final org.apache.thrift.protocol.TField INFOHASH_FIELD_DESC = new org.apache.thrift.protocol.TField("infohash", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfohashTorrent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfohashTorrent_argsTupleSchemeFactory());
    }

    public String infohash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFOHASH((short)1, "infohash");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFOHASH
            return INFOHASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFOHASH, new org.apache.thrift.meta_data.FieldMetaData("infohash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfohashTorrent_args.class, metaDataMap);
    }

    public getInfohashTorrent_args() {
    }

    public getInfohashTorrent_args(
      String infohash)
    {
      this();
      this.infohash = infohash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfohashTorrent_args(getInfohashTorrent_args other) {
      if (other.isSetInfohash()) {
        this.infohash = other.infohash;
      }
    }

    public getInfohashTorrent_args deepCopy() {
      return new getInfohashTorrent_args(this);
    }

    @Override
    public void clear() {
      this.infohash = null;
    }

    public String getInfohash() {
      return this.infohash;
    }

    public getInfohashTorrent_args setInfohash(String infohash) {
      this.infohash = infohash;
      return this;
    }

    public void unsetInfohash() {
      this.infohash = null;
    }

    /** Returns true if field infohash is set (has been assigned a value) and false otherwise */
    public boolean isSetInfohash() {
      return this.infohash != null;
    }

    public void setInfohashIsSet(boolean value) {
      if (!value) {
        this.infohash = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INFOHASH:
        if (value == null) {
          unsetInfohash();
        } else {
          setInfohash((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFOHASH:
        return getInfohash();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFOHASH:
        return isSetInfohash();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfohashTorrent_args)
        return this.equals((getInfohashTorrent_args)that);
      return false;
    }

    public boolean equals(getInfohashTorrent_args that) {
      if (that == null)
        return false;

      boolean this_present_infohash = true && this.isSetInfohash();
      boolean that_present_infohash = true && that.isSetInfohash();
      if (this_present_infohash || that_present_infohash) {
        if (!(this_present_infohash && that_present_infohash))
          return false;
        if (!this.infohash.equals(that.infohash))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfohashTorrent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfohashTorrent_args typedOther = (getInfohashTorrent_args)other;

      lastComparison = Boolean.valueOf(isSetInfohash()).compareTo(typedOther.isSetInfohash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfohash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infohash, typedOther.infohash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfohashTorrent_args(");
      boolean first = true;

      sb.append("infohash:");
      if (this.infohash == null) {
        sb.append("null");
      } else {
        sb.append(this.infohash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfohashTorrent_argsStandardSchemeFactory implements SchemeFactory {
      public getInfohashTorrent_argsStandardScheme getScheme() {
        return new getInfohashTorrent_argsStandardScheme();
      }
    }

    private static class getInfohashTorrent_argsStandardScheme extends StandardScheme<getInfohashTorrent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfohashTorrent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFOHASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.infohash = iprot.readString();
                struct.setInfohashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfohashTorrent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.infohash != null) {
          oprot.writeFieldBegin(INFOHASH_FIELD_DESC);
          oprot.writeString(struct.infohash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfohashTorrent_argsTupleSchemeFactory implements SchemeFactory {
      public getInfohashTorrent_argsTupleScheme getScheme() {
        return new getInfohashTorrent_argsTupleScheme();
      }
    }

    private static class getInfohashTorrent_argsTupleScheme extends TupleScheme<getInfohashTorrent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfohashTorrent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInfohash()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfohash()) {
          oprot.writeString(struct.infohash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfohashTorrent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.infohash = iprot.readString();
          struct.setInfohashIsSet(true);
        }
      }
    }

  }

  public static class getInfohashTorrent_result implements org.apache.thrift.TBase<getInfohashTorrent_result, getInfohashTorrent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfohashTorrent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfohashTorrent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfohashTorrent_resultTupleSchemeFactory());
    }

    public InfohashTorrent success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InfohashTorrent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfohashTorrent_result.class, metaDataMap);
    }

    public getInfohashTorrent_result() {
    }

    public getInfohashTorrent_result(
      InfohashTorrent success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfohashTorrent_result(getInfohashTorrent_result other) {
      if (other.isSetSuccess()) {
        this.success = new InfohashTorrent(other.success);
      }
    }

    public getInfohashTorrent_result deepCopy() {
      return new getInfohashTorrent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public InfohashTorrent getSuccess() {
      return this.success;
    }

    public getInfohashTorrent_result setSuccess(InfohashTorrent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InfohashTorrent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfohashTorrent_result)
        return this.equals((getInfohashTorrent_result)that);
      return false;
    }

    public boolean equals(getInfohashTorrent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfohashTorrent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfohashTorrent_result typedOther = (getInfohashTorrent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfohashTorrent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfohashTorrent_resultStandardSchemeFactory implements SchemeFactory {
      public getInfohashTorrent_resultStandardScheme getScheme() {
        return new getInfohashTorrent_resultStandardScheme();
      }
    }

    private static class getInfohashTorrent_resultStandardScheme extends StandardScheme<getInfohashTorrent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfohashTorrent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InfohashTorrent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfohashTorrent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfohashTorrent_resultTupleSchemeFactory implements SchemeFactory {
      public getInfohashTorrent_resultTupleScheme getScheme() {
        return new getInfohashTorrent_resultTupleScheme();
      }
    }

    private static class getInfohashTorrent_resultTupleScheme extends TupleScheme<getInfohashTorrent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfohashTorrent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfohashTorrent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new InfohashTorrent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
